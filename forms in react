--------------- React Hook form ---------------------------------- https://react-hook-form.com/get-started

import React, {useEffect, useState} from 'react' 
import { useForm } from 'react-hook-form'

function App() {

  const {register,handleSubmit, watch ,formState: {errors}} = useForm();
  const onSubmit = (data) => console.log(data);

  // console.log(watch('name'));
  const watchedName = watch('name');
  const watchedEmail = watch('email')

  useEffect (() =>{
    console.log('Name ',watchedName);
  },[watchedName]
  )

  useEffect (() => {
    console.log("Email ",watchedEmail)
  },[watchedEmail]);

  return(
    <div>
      <h1>Forms in react</h1>
      <form onSubmit={handleSubmit(onSubmit)}>
        <label>
          Name: 
          <input {...register('name',{required : 'Name is required',minLength:{value:2,message: 'Name should be atleast 2 characters'}})}/>
        </label>
        {errors.name && <p>{errors.name.message}</p>}
        <label>
          Email:
          <input {...register('email',{required : true,pattern : /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$/})}/>
        </label>
        {errors.email && <p>Email is required</p>}
        <button type='submit'>Submit</button>
      </form>
      
    </div>
  )
}
export default App



---------------------------- form with validation -------------------------------

import React, {useEffect, useState} from 'react' 

function App() {
  
  const [formData, setFormData] = useState({name:'',email:''})
  const handleSubmit = (e) =>{
    e.preventDefault();
    const validateErrors = validate();
    if(Object.keys(validateErrors).length > 0){
      setErrors(validateErrors);
    }else{
      console.log('Form data submitted ',formData)
    }
    
  };

  const handleChange = (e) =>{
    console.log(e.target.value);
    setFormData({
      ...formData,
      [e.target.name] : e.target.value,
      [e.target.email] : e.target.value
    })
  }

  const [errors,setErrors] = useState({});
  const validate = () =>{
    const newErrors = {};
    if(!formData.name.trim()){
      newErrors.name = 'Name is required';
    }
  }
  if(errors[name]){
    const newErrors = {...errors};
    delete newErrors[name];
    setErrors(newErrors);
  }


  return(
    <div>
      <h1>Forms in react</h1>
      <form onSubmit={handleSubmit}>
        <label>
          Name:
          <input
            type='text'
            name='name'
            value={formData.name}
            onChange={handleChange}></input>
            {errors.name && <span>{errors.name}</span>}
        </label>
        <br></br>
        <br></br>
        <label>
          Email :
          <input
          type='email'
          name='email'
          value={formData.email}
          onChange={handleChange}></input>
        </label>
        <br></br>
        <button type='submit'>Submit</button>
      </form>
      
    </div>
  )
}
export default App

----------------------------- Tailwind CLI. ---------------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tailwind css</title>
    <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
</head>
<body class="bg-gray-100 flex justify-center items-center h-screen">
    <!-- <h1 class="text-2xl font-bold italic">
        Hello, World
    </h1> -->
    <div class="bg-white p-8 rounded-lg shadow-lg">
        <h1 class="text-2xl font-bold text-gray">Hello Tailwind css</h1>
        <p class="text-gray-600">This is a simple example</p>
    </div>


</body>
</html>

